# 本設定ファイルはokuyamaの性能検証時に導き出した設定になっています。
# OS側が4コア以上のCPUを認識している(ハイパースレッティングでもOK)場合に高い性能を発揮します。
# 同時接続クライアントが500以上で且つ、秒間数万を超えるようなアクセスでも高い性能を発揮します。
# 本設定ではDataNodeは2台起動しますが、検証時は1台のみ起動していました。
# joblist=から"KeyManagerJob2"の記述を消してください。

joblist=KeyManagerJob1,KeyManagerJob2,ServerManagedJob
helperlist=KeyManagerHelper,KeyManagerConnectHelper,KeyManagerAcceptHelper,ServerControllerHelper,ServerTimerHelper


KeyManagerJob1.JobClass=okuyama.imdst.job.KeyManagerJob
KeyManagerJob1.Init=5553
KeyManagerJob1.Option=./keymapfile/1.key,./keymapfile/1.work.key
KeyManagerJob1.Depend=

KeyManagerJob2.JobClass=okuyama.imdst.job.KeyManagerJob
KeyManagerJob2.Init=5554
KeyManagerJob2.Option=./keymapfile/2.key,./keymapfile/2.work.key
KeyManagerJob2.Depend=


ServerManagedJob.JobClass=okuyama.imdst.job.ServerManagedJob
ServerManagedJob.Init=
ServerManagedJob.Option=true
ServerManagedJob.Depend=



KeyManagerHelper.HelperClass=okuyama.imdst.helper.KeyManagerHelper
KeyManagerHelper.Init=
#KeyManagerHelper.Init=memcache
KeyManagerHelper.Option=

KeyManagerConnectHelper.HelperClass=okuyama.imdst.helper.KeyManagerConnectHelper
KeyManagerConnectHelper.Init=
KeyManagerConnectHelper.Option=

KeyManagerAcceptHelper.HelperClass=okuyama.imdst.helper.KeyManagerAcceptHelper
KeyManagerAcceptHelper.Init=
KeyManagerAcceptHelper.Option=

ServerControllerHelper.HelperClass=okuyama.imdst.helper.ServerControllerHelper
ServerControllerHelper.Init=15553
ServerControllerHelper.Option=

ServerTimerHelper.HelperClass=okuyama.imdst.helper.ServerTimerHelper
ServerTimerHelper.Init=
ServerTimerHelper.Option=
###########################################################################
ServerStopFile=./ServerStop

KeyManagerJob1.memoryMode=false
KeyManagerJob1.dataMemory=true
KeyManagerJob1.keyMemory=true
KeyManagerJob1.memoryLimitSize=80
KeyManagerJob1.virtualStoreDirs=./keymapfile/virtualdata1/
KeyManagerJob1.keyStoreDirs=./keymapfile/data1/,./keymapfile/data2/
KeyManagerJob1.keySize=5000000

KeyManagerJob2.memoryMode=false
KeyManagerJob2.dataMemory=true
KeyManagerJob2.keyMemory=true
KeyManagerJob2.memoryLimitSize=80
KeyManagerJob2.virtualStoreDirs=./keymapfile/virtualdata2/
KeyManagerJob2.keyStoreDirs=./keymapfile/data3/,./keymapfile/data4/
KeyManagerJob2.keySize=5000000



### KeyとValueを保存するMapに何を使用するかを指定 ##
## 何も指定しない場合は、ConcurrentHashMapベースのMapが利用される
## 特性は高速に動くがメモリ消費量が大きい
## "serialize"と指定すると、オリジナルのSerializeMapが利用される
## ConcurrentHashMapに比べると低速だが、より多いデータをメモリ上に持てる
## そこまで高速でなくても良いが、大量のデータをメモリに持ちたい場合は
## serializeを指定する
## フルパス指定後、";"区切りでコンストラクタ引数が指定できる
## コンストラクタ引数を指定した場合は、該当のシリアライザにも引数(String)有りのコンストラクタを
## 定義する必要がある
##
## 例) 画像ファイルなどそこそこ大きいデータを保存したいが
##     ある程度高速に稼動させたい場合
##     --------------------------------
##     KeyManagerJob1.memoryMode=false
##     KeyManagerJob1.dataMemory=false
##     KeyManagerJob1.keyMemory=true
##     DataSaveMapType=serialize
##     SerializerClassName=okuyama.imdst.util.serializemap.ObjectStreamSerializer
##     --------------------------------
##     上記はKeyはメモリ上のSerializeMapに置き、Valueはファイルにストアしている
##
## この設定は本設定ファイル上で定義されているDataNode全てに反映される
DataSaveMapType=
SerializerClassName=


### Valueをメモリに保存してい場合のメモリへの書き出し制限 ###
## この設定は"dataMemory=true"の場合のみ有効
## Valueをメモリに保存している場合にこのサイズよりも大きないサイズ(単位はbyte)のデータが
## 保存された場合は、メモリではなくFileに書き出される。
## 操作メソッドには何も影響はないが、Fileアクセスを行うため処理時間は増える
## 例えば小さいメタデータ以外に画像などのある程度サイズのあるデータも合わせて保存する
## シチュエーションで利用する場合にメモリを有効に活用できる。
##
## 書き出されるFileのディレクトリはvirtualStoreDirsが利用されるので
## 本機能を利用する場合は、virtualStoreDirsを設定する必要がある
## 0以下の値を設定した場合は無効->全てのValueがメモリに保存される
## 設定しない場合のデフォルトは無効
##
## この設定は本設定ファイル上で定義されているDataNode全てに反映される
SaveDataMemoryStoreLimitSize=0


### メモリへのデータ保存時に圧縮を行う ###
## この設定は"dataMemory=true"の場合のみ有効
## true=圧縮、false=非圧縮
## 圧縮を行えばCPU資源を利用するため圧縮効果が望めないデータを保存する場合はfalseが有効
## 設定しない場合のデフォルトはtrue
##
## SaveDataCompressTypeは圧縮指定　1 or 9のどちらかを指定
## 1=高速で低圧縮
## 9=低速で高圧縮
## 設定しない場合のデフォルトは1
##
## この設定は本設定ファイル上で定義されているDataNode全てに反映される
SaveDataCompress=true
SaveDataCompressType=1



### データ永続化トランザクションログファイルへの書き込みタイミング ###
## この設定は"memoryMode=false"の場合のみ有効
## !!falseに設定した場合は常に書き込まれないため、不意の障害時にデータをロストする可能性が上がる!!
## 設定しない場合のデフォルトはtrue
## この設定は本設定ファイル上で定義されているDataNode全てに反映される
DataSaveTransactionFileEveryCommit=true


### 共有データファイルへの変更書き込みのタイミング設定 ###
## この設定は"dataMemory=false"の場合のみ有効
## trueにした場合は共有データファイルへの変更(ディスク書き込み)を即時ディスクに反映するのではなく別スレッドで随時行う
## 書き込みが行われるまでメモリ上に保持されるのでメモリを消費する。その最大書き込みプール数(データ数)を設定するのが、
## ShareDataFileMaxDelayCount(数値を指定する)であるここで設定した数値の最大12888倍のバイト数分メモリを消費する
## 最大遅延保持数は999999(この数だけ蓄積する前にメモリが足りなくなる場合もある)
## 設定しない場合のデフォルトはfalse
## この設定は本設定ファイル上で定義されているDataNode全てに反映される
ShareDataFileWriteDelayFlg=false
ShareDataFileMaxDelayCount=



KeyNodeMaxConnectParallelExecution=20
KeyNodeMaxConnectParallelQueue=5
KeyNodeMaxAcceptParallelExecution=50
KeyNodeMaxAcceptParallelQueue=5
KeyNodeMaxWorkerParallelExecution=50
KeyNodeMaxWorkerParallelQueue=5
